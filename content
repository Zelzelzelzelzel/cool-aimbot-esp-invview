--! /usr/bin/env lua

--[[
    Enjoy
]]

local fov = 25 -- Field of View radius for aimbot detection
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Cam = game.Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Global state variables for the script's features
local scriptEnabled = false -- Aimbot Script starts OFF by default
local inventoryDisplayEnabled = false -- Inventory display starts OFF by default
local espEnabled = false -- ESP (highlight) starts OFF by default
local aimTargetMode = "HumanoidRootPart" -- Controls which part to target: "HumanoidRootPart", "Head", or "Random"
local maxDetectionDistance = 500 -- Max distance in studs for aimbot and ESP detection

-- New variables for aim randomness and noise
local aimNoiseAmount = 0.0 -- Magnitude of random noise to add to aim (0.0 for none, 0.1 for low, 0.25 for medium)
local headTargetProbability = 0.5 -- When aimTargetMode is "Random", this is the probability (0 to 1) of aiming at the Head

-- Drawing object for the FOV circle
local FOVring = Drawing.new("Circle")
FOVring.Visible = scriptEnabled -- Initial visibility based on scriptEnabled
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(255, 165, 0) -- Orange color
FOVring.Filled = false
FOVring.Radius = fov
FOVring.Position = Cam.ViewportSize / 2

-- Tables to store references to created UI/visual objects for cleanup and management
local playerHighlights = {}
local playerInventoryGUIs = {}

-- Create the UI elements for the on/off switch and collapsible menu
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AimbotToggleGui"
screenGui.Parent = playerGui
screenGui.ResetOnSpawn = false -- Ensures the GUI persists across player spawns

local mainFrame = Instance.new("Frame")
mainFrame.Name = "AimbotMainFrame"
mainFrame.Size = UDim2.new(0, 180, 0, 100) -- Initial size (will be adjusted by collapse and new buttons)
mainFrame.Position = UDim2.new(0.05, 0, 0.05, 0) -- Position relative to screen
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.BorderSizePixel = 2
mainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
mainFrame.Parent = screenGui
mainFrame.Draggable = true -- Allows user to drag the UI around
mainFrame.Active = true

local headerFrame = Instance.new("Frame")
headerFrame.Name = "HeaderFrame"
headerFrame.Size = UDim2.new(1, 0, 0, 30) -- Full width, 30px height
headerFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
headerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
headerFrame.BorderSizePixel = 1
headerFrame.Parent = mainFrame
headerFrame.Active = true

local headerText = Instance.new("TextLabel")
headerText.Name = "HeaderText"
headerText.Size = UDim2.new(0.7, 0, 1, 0) -- Takes most of the header
headerText.Position = UDim2.new(0, 0, 0, 0)
headerText.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
headerText.TextColor3 = Color3.fromRGB(255, 255, 255)
headerText.Text = "Aimbot Menu"
headerText.Font = Enum.Font.SourceSansBold
headerText.TextSize = 18
headerText.Parent = headerFrame
headerText.Active = true

local toggleCollapseButton = Instance.new("TextButton")
toggleCollapseButton.Name = "ToggleCollapseButton"
toggleCollapseButton.Size = UDim2.new(0.3, 0, 1, 0) -- Remaining width for button
toggleCollapseButton.Position = UDim2.new(0.7, 0, 0, 0)
toggleCollapseButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
toggleCollapseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleCollapseButton.Text = "+" -- Start collapsed (changed to "+" to indicate it can be expanded)
toggleCollapseButton.Font = Enum.Font.SourceSansBold
toggleCollapseButton.TextSize = 20
toggleCollapseButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
toggleCollapseButton.BorderSizePixel = 1
toggleCollapseButton.Parent = headerFrame
toggleCollapseButton.Active = true

local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, 0, 1, -30) -- Takes full width, remaining height
contentFrame.Position = UDim2.new(0, 0, 0, 30) -- Below the header
contentFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame
contentFrame.Active = true

local aimbotToggleButton = Instance.new("TextButton")
aimbotToggleButton.Name = "AimbotToggleButton"
aimbotToggleButton.Size = UDim2.new(0, 150, 0, 28)
aimbotToggleButton.Position = UDim2.new(0.5, -75, 0, 5)
aimbotToggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50) -- Red when OFF
aimbotToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
aimbotToggleButton.Text = "Aimbot OFF"
aimbotToggleButton.Font = Enum.Font.SourceSansBold
aimbotToggleButton.TextSize = 18
aimbotToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
aimbotToggleButton.BorderSizePixel = 2
aimbotToggleButton.Parent = contentFrame

local inventoryDisplayToggleButton = Instance.new("TextButton")
inventoryDisplayToggleButton.Name = "InventoryDisplayToggleButton"
inventoryDisplayToggleButton.Size = UDim2.new(0, 150, 0, 28)
inventoryDisplayToggleButton.Position = UDim2.new(0.5, -75, 0, 38)
inventoryDisplayToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 200) -- Blue when OFF
inventoryDisplayToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
inventoryDisplayToggleButton.Text = "Inv. Display OFF"
inventoryDisplayToggleButton.Font = Enum.Font.SourceSansBold
inventoryDisplayToggleButton.TextSize = 18
inventoryDisplayToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
inventoryDisplayToggleButton.BorderSizePixel = 2
inventoryDisplayToggleButton.Parent = contentFrame

local espToggleButton = Instance.new("TextButton")
espToggleButton.Name = "ESPToggleButton"
espToggleButton.Size = UDim2.new(0, 150, 0, 28)
espToggleButton.Position = UDim2.new(0.5, -75, 0, 71)
espToggleButton.BackgroundColor3 = Color3.fromRGB(200, 150, 50) -- Orange when OFF
espToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
espToggleButton.Text = "ESP OFF"
espToggleButton.Font = Enum.Font.SourceSansBold
espToggleButton.TextSize = 18
espToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
espToggleButton.BorderSizePixel = 2
espToggleButton.Parent = contentFrame

local aimbotTargetToggleButton = Instance.new("TextButton")
aimbotTargetToggleButton.Name = "AimbotTargetToggleButton"
aimbotTargetToggleButton.Size = UDim2.new(0, 150, 0, 28)
aimbotTargetToggleButton.Position = UDim2.new(0.5, -75, 0, 104)
aimbotTargetToggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Grey
aimbotTargetToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
aimbotTargetToggleButton.Text = "Target: " .. aimTargetMode
aimbotTargetToggleButton.Font = Enum.Font.SourceSansBold
aimbotTargetToggleButton.TextSize = 16
aimbotTargetToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
aimbotTargetToggleButton.BorderSizePixel = 2
aimbotTargetToggleButton.Parent = contentFrame

local maxDistanceToggleButton = Instance.new("TextButton")
maxDistanceToggleButton.Name = "MaxDistanceToggleButton"
maxDistanceToggleButton.Size = UDim2.new(0, 150, 0, 28)
maxDistanceToggleButton.Position = UDim2.new(0.5, -75, 0, 137)
maxDistanceToggleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70) -- Darker Grey
maxDistanceToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
maxDistanceToggleButton.Text = "Max Dist: " .. maxDetectionDistance .. " studs"
maxDistanceToggleButton.Font = Enum.Font.SourceSansBold
maxDistanceToggleButton.TextSize = 14
maxDistanceToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
maxDistanceToggleButton.BorderSizePixel = 2
maxDistanceToggleButton.Parent = contentFrame

-- NEW: Aim Noise Toggle Button
local aimNoiseToggleButton = Instance.new("TextButton")
aimNoiseToggleButton.Name = "AimNoiseToggleButton"
aimNoiseToggleButton.Size = UDim2.new(0, 150, 0, 28)
aimNoiseToggleButton.Position = UDim2.new(0.5, -75, 0, 170) -- Position below Max Distance button (137 + 28 + 5 padding)
aimNoiseToggleButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90) -- Medium Grey
aimNoiseToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
aimNoiseToggleButton.Text = "Noise: None" -- Initial text
aimNoiseToggleButton.Font = Enum.Font.SourceSansBold
aimNoiseToggleButton.TextSize = 16
aimNoiseToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
aimNoiseToggleButton.BorderSizePixel = 2
aimNoiseToggleButton.Parent = contentFrame

-- Adjust mainFrame size to accommodate all buttons if not collapsed
-- 30 header + 6*28 buttons + 7*5 padding = 30 + 168 + 35 = 233
mainFrame.Size = UDim2.new(0, 180, 0, 233)

-- Variable to store the RenderStepped connection so it can be disconnected later
local aimbotConnection

-- Initial state for GUI collapse (starts collapsed)
local isCollapsed = true -- Changed to true to start collapsed
mainFrame.Size = UDim2.new(0, 180, 0, 30)
contentFrame.Visible = false -- Ensure content frame is hidden on start

--- Highlight Management (No changes needed here) ---

local function createOrUpdatePlayerHighlight(player)
    if player == LocalPlayer then return end -- Don't highlight local player

    local function setupHighlightForCharacter(character)
        if not character then return end

        local currentHighlight = playerHighlights[player.UserId]

        if not currentHighlight then
            currentHighlight = Instance.new("Highlight")
            currentHighlight.FillTransparency = 0.6
            currentHighlight.OutlineTransparency = 0
            currentHighlight.FillColor = Color3.fromRGB(255, 255, 0) -- Yellow fill
            currentHighlight.OutlineColor = Color3.fromRGB(255, 0, 0) -- Red outline
            playerHighlights[player.UserId] = currentHighlight
        end

        currentHighlight.Parent = character
        currentHighlight.Enabled = espEnabled
    end

    player.CharacterAdded:Connect(setupHighlightForCharacter)
    if player.Character then
        setupHighlightForCharacter(player.Character)
    end
end

local function removePlayerHighlight(player)
    if playerHighlights[player.UserId] then
        playerHighlights[player.UserId]:Destroy()
        playerHighlights[player.UserId] = nil
    end
end

local function updateAllHighlightsVisibility(enabled)
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            createOrUpdatePlayerHighlight(player)
            if playerHighlights[player.UserId] then
                playerHighlights[player.UserId].Enabled = enabled
            end
        end
    end
end

--- Inventory Display Management (No changes needed here) ---

local function updateInventoryDisplayContent(player, billboardGui)
    local scrollingFrame = billboardGui:FindFirstChild("MainFrame"):FindFirstChild("ScrollingFrame")
    if not scrollingFrame then return end

    for _, child in ipairs(scrollingFrame:GetChildren()) do
        if child:IsA("TextLabel") then
            child:Destroy()
        end
    end

    local itemsFound = false

    if player.Backpack then
        for _, item in ipairs(player.Backpack:GetChildren()) do
            if item:IsA("Tool") then
                local itemLabel = Instance.new("TextLabel")
                itemLabel.Size = UDim2.new(1, 0, 0, 16)
                itemLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                itemLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                itemLabel.Text = item.Name
                itemLabel.TextSize = 14
                itemLabel.TextXAlignment = Enum.TextXAlignment.Left
                itemLabel.TextWrapped = true
                itemLabel.Parent = scrollingFrame
                itemsFound = true
            end
        end
    end

    if player.Character then
        for _, item in ipairs(player.Character:GetChildren()) do
            if item:IsA("Tool") then
                local itemLabel = Instance.new("TextLabel")
                itemLabel.Size = UDim2.new(1, 0, 0, 16)
                itemLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                itemLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                itemLabel.Text = "(Equipped) " .. item.Name
                itemLabel.TextSize = 14
                itemLabel.TextXAlignment = Enum.TextXAlignment.Left
                itemLabel.TextWrapped = true
                itemLabel.Parent = scrollingFrame
                itemsFound = true
            end
        end
    end

    if not itemsFound then
        local noItemsLabel = Instance.new("TextLabel")
        noItemsLabel.Size = UDim2.new(1, 0, 0, 16)
        noItemsLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        noItemsLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
        noItemsLabel.Text = "No items"
        noItemsLabel.TextSize = 14
        noItemsLabel.TextXAlignment = Enum.TextXAlignment.Center
        noItemsLabel.Parent = scrollingFrame
    end
end

local function createPlayerInventoryDisplay(player)
    if player == LocalPlayer then return end

    local function setupBillboardGuiForCharacter(character)
        if playerInventoryGUIs[player.UserId] then
            playerInventoryGUIs[player.UserId]:Destroy()
            playerInventoryGUIs[player.UserId] = nil
        end

        if not character or not character:FindFirstChildOfClass("Humanoid") then
            return
        end

        local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
        if not humanoidRootPart then
            warn("Could not find HumanoidRootPart for " .. player.Name .. "'s character after waiting. Inventory display aborted.")
            return
        end

        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Name = "InventoryDisplay_" .. player.Name
        billboardGui.Size = UDim2.new(0, 120, 0, 80)
        billboardGui.Adornee = humanoidRootPart
        billboardGui.AlwaysOnTop = true
        billboardGui.ExtentsOffset = Vector3.new(0, 3, 0)
        billboardGui.Parent = game.Workspace.CurrentCamera
        billboardGui.Enabled = inventoryDisplayEnabled
        playerInventoryGUIs[player.UserId] = billboardGui

        local mainFrameBG = Instance.new("Frame")
        mainFrameBG.Name = "MainFrame"
        mainFrameBG.Size = UDim2.new(1, 0, 1, 0)
        mainFrameBG.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        mainFrameBG.BackgroundTransparency = 0.3
        mainFrameBG.BorderColor3 = Color3.fromRGB(0, 0, 0)
        mainFrameBG.BorderSizePixel = 1
        mainFrameBG.Parent = billboardGui

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "PlayerName"
        nameLabel.Size = UDim2.new(1, 0, 0, 18)
        nameLabel.Position = UDim2.new(0,0,0,0)
        nameLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.Text = player.Name
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextSize = 14
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.TextWrapped = true
        nameLabel.Parent = mainFrameBG

        local scrollingFrame = Instance.new("ScrollingFrame")
        scrollingFrame.Name = "ScrollingFrame"
        scrollingFrame.Size = UDim2.new(1, 0, 1, -18)
        scrollingFrame.Position = UDim2.new(0, 0, 0, 18)
        scrollingFrame.BackgroundTransparency = 1
        scrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        scrollingFrame.BorderSizePixel = 0
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        scrollingFrame.ScrollBarThickness = 4
        scrollingFrame.Parent = mainFrameBG

        local listLayout = Instance.new("UIListLayout")
        listLayout.FillDirection = Enum.FillDirection.Vertical
        listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        listLayout.Padding = UDim.new(0, 2)
        listLayout.Parent = scrollingFrame

        updateInventoryDisplayContent(player, billboardGui)

        local backpackConnection = player.Backpack.ChildAdded:Connect(function() updateInventoryDisplayContent(player, billboardGui) end)
        local backpackRemovedConnection = player.Backpack.ChildRemoved:Connect(function() updateInventoryDisplayContent(player, billboardGui) end)
        local charChildAddedConnection = character.ChildAdded:Connect(function(child)
            if child:IsA("Tool") then updateInventoryDisplayContent(player, billboardGui) end
        end)
        local charChildRemovedConnection = character.ChildRemoved:Connect(function(child)
            if child:IsA("Tool") then updateInventoryDisplayContent(player, billboardGui) end
        end)

        billboardGui.Destroying:Connect(function()
            if backpackConnection then backpackConnection:Disconnect() end
            if backpackRemovedConnection then backpackRemovedConnection:Disconnect() end
            if charChildAddedConnection then charChildAddedConnection:Disconnect() end
            if charChildRemovedConnection then charChildRemovedConnection:Disconnect() end
        end)
    end

    player.CharacterAdded:Connect(setupBillboardGuiForCharacter)
    if player.Character then
        setupBillboardGuiForCharacter(player.Character)
    end
end

local function removePlayerInventoryDisplay(player)
    if playerInventoryGUIs[player.UserId] then
        playerInventoryGUIs[player.UserId]:Destroy()
        playerInventoryGUIs[player.UserId] = nil
    end
end

local function updateAllInventoryDisplaysVisibility(enabled)
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and playerInventoryGUIs[player.UserId] then
            playerInventoryGUIs[player.UserId].Enabled = enabled
        end
    end
end

-- Initialize highlights and inventory displays for players already in the game when the script starts
local function setupExistingPlayersFeatures()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            createOrUpdatePlayerHighlight(player)
            createPlayerInventoryDisplay(player)
        end
    end
end

-- Listen for new players joining
Players.PlayerAdded:Connect(function(player)
    createOrUpdatePlayerHighlight(player)
    createPlayerInventoryDisplay(player)
end)

-- Listen for players leaving
Players.PlayerRemoving:Connect(function(player)
    removePlayerHighlight(player)
    removePlayerInventoryDisplay(player)
end)

--------------------------

local function updateDrawings()
    -- Only update and show the FOV ring if the script is currently enabled
    if scriptEnabled then
        local camViewportSize = Cam.ViewportSize
        FOVring.Position = camViewportSize / 2
        FOVring.Visible = true
    else
        FOVring.Visible = false
    end
end

-- Function to handle toggling the aimbot state
local function toggleAimbot()
    scriptEnabled = not scriptEnabled
    print("Aimbot Toggled:", scriptEnabled and "ON" or "OFF")

    -- Update the button's appearance based on the new state
    if scriptEnabled then
        aimbotToggleButton.Text = "Aimbot ON"
        aimbotToggleButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50) -- Green when ON
    else
        aimbotToggleButton.Text = "Aimbot OFF"
        aimbotToggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50) -- Red when OFF
    end
end

-- Function to handle toggling inventory display state
local function toggleInventoryDisplay()
    inventoryDisplayEnabled = not inventoryDisplayEnabled
    print("Inventory Display Toggled:", inventoryDisplayEnabled and "ON" or "OFF")

    -- Update the button's appearance based on the new state
    if inventoryDisplayEnabled then
        inventoryDisplayToggleButton.Text = "Inv. Display ON"
        inventoryDisplayToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 200) -- Blue when ON
    else
        inventoryDisplayToggleButton.Text = "Inv. Display OFF"
        inventoryDisplayToggleButton.BackgroundColor3 = Color3.fromRGB(200, 200, 50) -- Yellow when OFF
    end

    -- Update inventory display visibility for all players
    updateAllInventoryDisplaysVisibility(inventoryDisplayEnabled)
end

-- Function to handle toggling ESP state
local function toggleESP()
    espEnabled = not espEnabled
    print("ESP Toggled:", espEnabled and "ON" or "OFF")

    -- Update the button's appearance based on the new state
    if espEnabled then
        espToggleButton.Text = "ESP ON"
        espToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 200) -- Light Blue when ON
    else
        espToggleButton.Text = "ESP OFF"
        espToggleButton.BackgroundColor3 = Color3.fromRGB(200, 150, 50) -- Orange when OFF
    end

    -- Update highlight visibility for all players based on the new ESP state
    updateAllHighlightsVisibility(espEnabled)
end

-- NEW: Function to handle toggling aimbot target mode
local function toggleAimbotTarget()
    if aimTargetMode == "HumanoidRootPart" then
        aimTargetMode = "Head"
        aimbotTargetToggleButton.Text = "Target: Head"
        aimbotTargetToggleButton.BackgroundColor3 = Color3.fromRGB(150, 50, 200) -- Purple
    elseif aimTargetMode == "Head" then
        aimTargetMode = "Random"
        aimbotTargetToggleButton.Text = "Target: Random"
        aimbotTargetToggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 150) -- Teal
    else -- Currently "Random"
        aimTargetMode = "HumanoidRootPart"
        aimbotTargetToggleButton.Text = "Target: HumanoidRootPart"
        aimbotTargetToggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Grey
    end
    print("Aimbot Target Mode Toggled:", aimTargetMode)
end

-- NEW: Function to toggle Max Detection Distance
local function toggleMaxDistance()
    -- Cycle through a few common distances: 200, 500, 1000, 2000, 5000
    if maxDetectionDistance == 500 then
        maxDetectionDistance = 1000
    elseif maxDetectionDistance == 1000 then
        maxDetectionDistance = 2000
    elseif maxDetectionDistance == 2000 then
        maxDetectionDistance = 5000
    elseif maxDetectionDistance == 5000 then
        maxDetectionDistance = 200
    else -- Fallback, just in case
        maxDetectionDistance = 500
    end
    maxDistanceToggleButton.Text = "Max Dist: " .. maxDetectionDistance .. " studs"
    print("Max Detection Distance Toggled:", maxDetectionDistance, "studs")
end

-- NEW: Function to toggle Aim Noise Amount
local function toggleAimNoise()
    if aimNoiseAmount == 0.0 then
        aimNoiseAmount = 0.1 -- Low noise
        aimNoiseToggleButton.Text = "Noise: Low"
        aimNoiseToggleButton.BackgroundColor3 = Color3.fromRGB(200, 200, 0) -- Yellow
    elseif aimNoiseAmount == 0.1 then
        aimNoiseAmount = 0.25 -- Medium noise
        aimNoiseToggleButton.Text = "Noise: Med"
        aimNoiseToggleButton.BackgroundColor3 = Color3.fromRGB(200, 100, 0) -- Dark Orange
    else -- Currently 0.25 (Medium) or fallback
        aimNoiseAmount = 0.0 -- No noise
        aimNoiseToggleButton.Text = "Noise: None"
        aimNoiseToggleButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90) -- Medium Grey
    end
    print("Aim Noise Amount Toggled:", aimNoiseAmount)
end


-- Function to handle collapsing/expanding the GUI
local function toggleCollapse()
    isCollapsed = not isCollapsed
    if isCollapsed then
        mainFrame.Size = UDim2.new(0, 180, 0, 30) -- Only header height
        contentFrame.Visible = false
        toggleCollapseButton.Text = "+"
    else
        -- Calculate the height needed for all buttons (6 buttons * 28px height + 7 * 5px padding) + header (30px)
        local totalContentHeight = (6 * 28) + (7 * 5)
        mainFrame.Size = UDim2.new(0, 180, 0, 30 + totalContentHeight)
        contentFrame.Visible = true
        toggleCollapseButton.Text = "-"
    end
end

-- Connect UI buttons to their functions
aimbotToggleButton.MouseButton1Click:Connect(toggleAimbot)
inventoryDisplayToggleButton.MouseButton1Click:Connect(toggleInventoryDisplay)
espToggleButton.MouseButton1Click:Connect(toggleESP)
aimbotTargetToggleButton.MouseButton1Click:Connect(toggleAimbotTarget)
maxDistanceToggleButton.MouseButton1Click:Connect(toggleMaxDistance)
aimNoiseToggleButton.MouseButton1Click:Connect(toggleAimNoise) -- Connect the new aim noise button
toggleCollapseButton.MouseButton1Click:Connect(toggleCollapse)

local function onKeyDown(input)
    if input.KeyCode == Enum.KeyCode.Delete then
        print("Script Permanently Disabled and Removed.")
        scriptEnabled = false
        inventoryDisplayEnabled = false
        espEnabled = false
        FOVring:Remove()
        if aimbotConnection then
            aimbotConnection:Disconnect()
        end
        UserInputService.InputBegan:Disconnect(onKeyDown)
        screenGui:Destroy()
        -- Remove all existing highlights when the script is fully disabled
        for _, highlight in pairs(playerHighlights) do
            highlight:Destroy()
        end
        playerHighlights = {}
        -- Remove all existing inventory displays
        for _, displayGui in pairs(playerInventoryGUIs) do
            displayGui:Destroy()
        end
        playerInventoryGUIs = {}
    end
end

UserInputService.InputBegan:Connect(onKeyDown)

-- This function aims the camera at a given target position
local function lookAt(targetPosition)
    local lookVector = (targetPosition - Cam.CFrame.Position).unit
    local newCFrame = CFrame.new(Cam.CFrame.Position, Cam.CFrame.Position + lookVector)
    Cam.CFrame = newCFrame
end

-- This function finds the closest player within the FOV
local function getClosestPlayerInFOV()
    local nearest = nil
    local last = math.huge
    local playerMousePos = Cam.ViewportSize / 2
    local localCharacter = LocalPlayer.Character
    local localHumanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")

    if not localHumanoidRootPart then return nil end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            -- Optional: Add Team Check here if you want to ensure players on the same team are not targeted
            -- if LocalPlayer.Team and player.Team and LocalPlayer.Team == player.Team then
            --     continue -- Skip if they are on the same team
            -- end

            local targetPartForFOV = player.Character:FindFirstChild("HumanoidRootPart") -- Always use HRP for FOV check
            if not targetPartForFOV then continue end

            local playerDistance = (localHumanoidRootPart.Position - targetPartForFOV.Position).Magnitude
            
            if playerDistance > maxDetectionDistance then
                continue
            end

            local ePos, isVisible = Cam:WorldToViewportPoint(targetPartForFOV.Position)
            local distance = (Vector2.new(ePos.x, ePos.y) - playerMousePos).Magnitude

            if distance < last and isVisible and distance < fov then
                last = distance
                nearest = player
            end
        end
    end

    return nearest
end

-- Connect the main aimbot logic to RenderStepped
aimbotConnection = RunService.RenderStepped:Connect(function()
    updateDrawings() -- Always update drawing visibility and position

    -- Only execute the aiming logic if the script is enabled
    if scriptEnabled then
        local closestPlayer = getClosestPlayerInFOV()
        if closestPlayer and closestPlayer.Character then
            local character = closestPlayer.Character
            local effectiveTargetPart = nil

            if aimTargetMode == "HumanoidRootPart" then
                effectiveTargetPart = character:FindFirstChild("HumanoidRootPart")
            elseif aimTargetMode == "Head" then
                effectiveTargetPart = character:FindFirstChild("Head")
            elseif aimTargetMode == "Random" then
                -- Randomly choose between Head and HumanoidRootPart based on probability
                if math.random() < headTargetProbability then
                    effectiveTargetPart = character:FindFirstChild("Head")
                else
                    effectiveTargetPart = character:FindFirstChild("HumanoidRootPart")
                end
            end

            if effectiveTargetPart then
                local targetPosition = effectiveTargetPart.Position

                -- Apply aim noise if enabled
                if aimNoiseAmount > 0 then
                    local randomX = math.random(-100, 100) / 100 * aimNoiseAmount
                    local randomY = math.random(-100, 100) / 100 * aimNoiseAmount
                    local randomZ = math.random(-100, 100) / 100 * aimNoiseAmount
                    targetPosition = targetPosition + Vector3.new(randomX, randomY, randomZ)
                end

                lookAt(targetPosition)
            end
        end
    end
end)

-- Initialize highlights and inventory displays for players already in the game when the script starts
-- This should be called after all functions are defined
setupExistingPlayersFeatures()

-- Ensure the GUI is initially collapsed as per `isCollapsed = true`
toggleCollapse()
